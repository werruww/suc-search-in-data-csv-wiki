# -*- coding: utf-8 -*-
"""succ_searchdata.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hJH_SC1wKVqb5ygc3hLz9KUbj7MxBlKd
"""

from sentence_transformers import CrossEncoder

model = CrossEncoder("cross-encoder/ms-marco-MiniLM-L6-v2")

query = "Which planet is known as the Red Planet?"
passages = [
	"Venus is often called Earth's twin because of its similar size and proximity.",
	"Mars, known for its reddish appearance, is often referred to as the Red Planet.",
	"Jupiter, the largest planet in our solar system, has a prominent red spot.",
	"Saturn, famous for its rings, is sometimes mistaken for the Red Planet."
]

scores = model.predict([(query, passage) for passage in passages])
print(scores)

from sentence_transformers import CrossEncoder

model = CrossEncoder("cross-encoder/ms-marco-MiniLM-L6-v2")

query = "Which planet is known as the Red Planet?"
passages = [
    "Venus is often called Earth's twin because of its similar size and proximity.",
    "Mars, known for its reddish appearance, is often referred to as the Red Planet.",
    "Jupiter, the largest planet in our solar system, has a prominent red spot.",
    "Saturn, famous for its rings, is sometimes mistaken for the Red Planet."
]

scores = model.predict([(query, passage) for passage in passages])

# Get the index of the passage with the highest score
max_score_index = scores.argmax()

# Print the answer (the passage with the highest score)
print(passages[max_score_index])

import pandas as pd

df = pd.read_csv('مسار_ملف_الداتاسيت.csv')  #  استبدل "مسار_ملف_الداتاسيت.csv"  بمسار الملف الفعلي

from sentence_transformers import CrossEncoder
import pandas as pd

model = CrossEncoder("cross-encoder/ms-marco-MiniLM-L6-v2")

df = pd.read_csv('dataset.csv')  # استبدل بمسار ملف الداتاسيت

# افترض أن عمود "text" يحتوي على النص المراد تحليله
queries = df['text'].tolist()

# افترض أن عمود "answers" يحتوي على الإجابات
passages = df['answers'].tolist()

scores = model.predict([(query, passage) for query, passage in zip(queries, passages)])

# يمكن طباعة النتائج أو حفظها في ملف

from sentence_transformers import CrossEncoder
import pandas as pd

model = CrossEncoder("cross-encoder/ms-marco-MiniLM-L6-v2")

df = pd.read_csv('dataset.csv')  # استبدل بمسار ملف الداتاسيت

# افترض أن عمود "text" يحتوي على النص المراد تحليله
queries = df['text'].tolist()

# افترض أن عمود "answers" يحتوي على الإجابات
passages = df['answers'].tolist()


for query, passage in zip(queries, passages):
    scores = model.predict([(query, passage)])

    # Get the index of the passage with the highest score (in this case, it's always 0 as we have only one passage)
    max_score_index = scores.argmax()

    # Print the answer (the passage with the highest score)
    print(f"Query: {query}")
    print(f"Answer: {passage[max_score_index]}")  # Assuming passage is a list of possible answers
    print("-" * 20)

import csv

# قائمة المخترعين واختراعاتهم
inventors = [
    {"name": "Thomas Edison", "invention": "Light Bulb"},
    {"name": "Alexander Graham Bell", "invention": "Telephone"},
    {"name": "Marie Curie", "invention": "Radioactivity"},
    {"name": "The Wright Brothers", "invention": "Airplane"},
    {"name": "Tim Berners-Lee", "invention": "World Wide Web"}
    # ... يمكنك إضافة المزيد هنا ...
]

# إنشاء ملف CSV وكتابة البيانات
with open('dataset.csv', 'w', newline='', encoding='utf-8') as csvfile:
    fieldnames = ['name', 'invention']
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

    writer.writeheader()  # كتابة أسماء الأعمدة
    writer.writerows(inventors)  # كتابة البيانات

print("تم إنشاء ملف dataset.csv بنجاح!")



from sentence_transformers import CrossEncoder
import pandas as pd

model = CrossEncoder("cross-encoder/ms-marco-MiniLM-L6-v2")

df = pd.read_csv('dataset.csv')

# السؤال المراد طرحه
query = "من اخترع المصباح؟"

# الحصول على الإجابات من ملف الداتاسيت
passages = df['invention'].tolist()
names = df['name'].tolist()  # للحصول على اسم المخترع

# حساب النتائج
scores = model.predict([(query, passage) for passage in passages])

# الحصول على أعلى نتيجة
max_score_index = scores.argmax()

# طباعة السؤال والإجابة واسم المخترع
print(f"السؤال: {query}")
print(f"الإجابة: {passages[max_score_index]}")
print(f"المخترع: {names[max_score_index]}")

from sentence_transformers import CrossEncoder
import pandas as pd

model = CrossEncoder("cross-encoder/ms-marco-MiniLM-L6-v2")

df = pd.read_csv('dataset.csv')

# السؤال المراد طرحه
query = "Who invented the light bulb? "

# الحصول على الإجابات من ملف الداتاسيت
passages = df['invention'].tolist()
names = df['name'].tolist()  # للحصول على اسم المخترع

# حساب النتائج
scores = model.predict([(query, passage) for passage in passages])

# الحصول على أعلى نتيجة
max_score_index = scores.argmax()

# طباعة السؤال والإجابة واسم المخترع
print(f"السؤال: {query}")
print(f"الإجابة: {passages[max_score_index]}")
print(f"المخترع: {names[max_score_index]}")



import wikipedia
from sentence_transformers import CrossEncoder

model = CrossEncoder("cross-encoder/ms-marco-MiniLM-L6-v2")

# تحميل مقالة من ويكيبيديا
article = wikipedia.page("Europe")
text = article.content

# تقسيم النص إلى فقرات
passages = text.split("\n\n")

# طرح سؤال
query = "What is the capital of France?"

# حساب النتائج
scores = model.predict([(query, passage) for passage in passages])

# الحصول على أعلى نتيجة
max_score_index = scores.argmax()

# طباعة الإجابة
print(passages[max_score_index])

!pip install wikipedia==1.4.0

import wikipedia
from sentence_transformers import CrossEncoder

model = CrossEncoder("cross-encoder/ms-marco-MiniLM-L6-v2")

# تحميل مقالة من ويكيبيديا
article = wikipedia.page("Europe")
text = article.content

# تقسيم النص إلى فقرات
passages = text.split("\n\n")

# طرح سؤال
query = "What is the capital of France?"

# حساب النتائج
scores = model.predict([(query, passage) for passage in passages])

# الحصول على أعلى نتيجة
max_score_index = scores.argmax()

# طباعة الإجابة
print(passages[max_score_index])



import wikipedia
from sentence_transformers import CrossEncoder

model = CrossEncoder("cross-encoder/ms-marco-MiniLM-L6-v2")

# تحميل مقالة من ويكيبيديا
article = wikipedia.page("Europe")
text = article.content

# تقسيم النص إلى فقرات
passages = text.split("\n\n")

# طرح سؤال
query = "France?"

# حساب النتائج
scores = model.predict([(query, passage) for passage in passages])

# الحصول على أعلى نتيجة
max_score_index = scores.argmax()

# طباعة الإجابة
print(passages[max_score_index])



import wikipedia
from sentence_transformers import CrossEncoder

model = CrossEncoder("cross-encoder/ms-marco-MiniLM-L6-v2")

# تحميل مقالة من ويكيبيديا
article = wikipedia.page("Europe")
text = article.content

# تقسيم النص إلى فقرات
passages = text.split("\n\n")

# طرح سؤال
query = "Pearl Harbor"

# حساب النتائج
scores = model.predict([(query, passage) for passage in passages])

# الحصول على أعلى نتيجة
max_score_index = scores.argmax()

# طباعة الإجابة
print(passages[max_score_index])







import wikipedia

# تعيين اللغة إلى العربية
wikipedia.set_lang("ar")

def get_wikipedia_summary(term):
  """
  تبحث عن مصطلح في ويكيبيديا العربية وتعرض ملخص الصفحة.

  Args:
    term (str): الكلمة أو الاسم المراد البحث عنه.

  Returns:
    None: تطبع الملخص أو رسالة خطأ.
  """
  print(f"جارٍ البحث عن '{term}' في ويكيبيديا...")
  try:
    # محاولة الحصول على ملخص الصفحة
    # sentences=5 يحدد عدد الجمل المطلوبة تقريبًا (اختياري)
    summary = wikipedia.summary(term, sentences=5)
    print("\n--- ملخص من ويكيبيديا ---")
    print(summary)

  except wikipedia.exceptions.PageError:
    # في حالة عدم العثور على صفحة بهذا الاسم
    print(f"عذراً، لم أتمكن من العثور على صفحة ويكيبيديا لـ '{term}'.")

  except wikipedia.exceptions.DisambiguationError as e:
    # في حالة كان المصطلح غامضاً ويشير لعدة صفحات
    print(f"'{term}' قد تشير إلى عدة مواضيع. هل تقصد أحد التالية؟")
    # طباعة الخيارات المتاحة
    for i, option in enumerate(e.options):
        # نعرض أول 10 خيارات كحد أقصى لتجنب القوائم الطويلة جداً
        if i < 10:
            print(f"- {option}")
        else:
            print(f"... وغيرها ({len(e.options) - 10} خيار إضافي)")
            break # نكتفي بعرض أول 10

  except Exception as e:
    # للتعامل مع أي أخطاء أخرى غير متوقعة (مثل مشاكل الاتصال)
    print(f"حدث خطأ غير متوقع: {e}")

# --- الجزء الرئيسي لتشغيل الكود ---
if __name__ == "__main__":
  search_term = input("أدخل الكلمة أو الاسم الذي تريد البحث عنه في ويكيبيديا: ")
  if search_term: # التأكد من أن المستخدم أدخل شيئاً
    get_wikipedia_summary(search_term)
  else:
    print("لم تدخل أي مصطلح للبحث.")

import wikipedia

# تعيين اللغة إلى العربية
wikipedia.set_lang("ar")

def get_wikipedia_summary(term):
  """
  تبحث عن مصطلح في ويكيبيديا العربية وتعرض ملخص الصفحة.

  Args:
    term (str): الكلمة أو الاسم المراد البحث عنه.

  Returns:
    None: تطبع الملخص أو رسالة خطأ.
  """
  print(f"جارٍ البحث عن '{term}' في ويكيبيديا...")
  try:
    # محاولة الحصول على ملخص الصفحة
    # sentences=5 يحدد عدد الجمل المطلوبة تقريبًا (اختياري)
    summary = wikipedia.summary(term, sentences=5)
    print("\n--- ملخص من ويكيبيديا ---")
    print(summary)

  except wikipedia.exceptions.PageError:
    # في حالة عدم العثور على صفحة بهذا الاسم
    print(f"عذراً، لم أتمكن من العثور على صفحة ويكيبيديا لـ '{term}'.")

  except wikipedia.exceptions.DisambiguationError as e:
    # في حالة كان المصطلح غامضاً ويشير لعدة صفحات
    print(f"'{term}' قد تشير إلى عدة مواضيع. هل تقصد أحد التالية؟")
    # طباعة الخيارات المتاحة
    for i, option in enumerate(e.options):
        # نعرض أول 10 خيارات كحد أقصى لتجنب القوائم الطويلة جداً
        if i < 100:
            print(f"- {option}")
        else:
            print(f"... وغيرها ({len(e.options) - 100} خيار إضافي)")
            break # نكتفي بعرض أول 10

  except Exception as e:
    # للتعامل مع أي أخطاء أخرى غير متوقعة (مثل مشاكل الاتصال)
    print(f"حدث خطأ غير متوقع: {e}")

# --- الجزء الرئيسي لتشغيل الكود ---
if __name__ == "__main__":
  search_term = input("أدخل الكلمة أو الاسم الذي تريد البحث عنه في ويكيبيديا: ")
  if search_term: # التأكد من أن المستخدم أدخل شيئاً
    get_wikipedia_summary(search_term)
  else:
    print("لم تدخل أي مصطلح للبحث.")

import wikipedia

# تعيين اللغة إلى العربية
wikipedia.set_lang("ar")

def get_wikipedia_summary(term):
  """
  تبحث عن مصطلح في ويكيبيديا العربية وتعرض ملخص الصفحة.

  Args:
    term (str): الكلمة أو الاسم المراد البحث عنه.

  Returns:
    None: تطبع الملخص أو رسالة خطأ.
  """
  print(f"جارٍ البحث عن '{term}' في ويكيبيديا...")
  try:
    # محاولة الحصول على ملخص الصفحة
    # sentences=5 يحدد عدد الجمل المطلوبة تقريبًا (اختياري)
    summary = wikipedia.summary(term, sentences=5)
    print("\n--- ملخص من ويكيبيديا ---")
    print(summary)

  except wikipedia.exceptions.PageError:
    # في حالة عدم العثور على صفحة بهذا الاسم
    print(f"عذراً، لم أتمكن من العثور على صفحة ويكيبيديا لـ '{term}'.")

  except wikipedia.exceptions.DisambiguationError as e:
    # في حالة كان المصطلح غامضاً ويشير لعدة صفحات
    print(f"'{term}' قد تشير إلى عدة مواضيع. هل تقصد أحد التالية؟")
    # طباعة الخيارات المتاحة
    for i, option in enumerate(e.options):
        # نعرض أول 10 خيارات كحد أقصى لتجنب القوائم الطويلة جداً
        if i < 100:
            print(f"- {option}")
        else:
            print(f"... وغيرها ({len(e.options) - 100} خيار إضافي)")
            break # نكتفي بعرض أول 10

  except Exception as e:
    # للتعامل مع أي أخطاء أخرى غير متوقعة (مثل مشاكل الاتصال)
    print(f"حدث خطأ غير متوقع: {e}")

# --- الجزء الرئيسي لتشغيل الكود ---
if __name__ == "__main__":
  search_term = input("أدخل الكلمة أو الاسم الذي تريد البحث عنه في ويكيبيديا: ")
  if search_term: # التأكد من أن المستخدم أدخل شيئاً
    get_wikipedia_summary(search_term)
  else:
    print("لم تدخل أي مصطلح للبحث.")

"""طلب ملخص أطول باستخدام wikipedia.summary(): يمكنك ببساطة إزالة الوسيط sentences أو تحديد عدد أكبر من الجمل. لكن لاحظ أن summary مصمم لتقديم ملخص وقد لا يعطيك النص الكامل حتى بدون تحديد عدد الجمل.
طلب المحتوى الكامل للصفحة باستخدام wikipedia.page().content: هذا الخيار يجلب النص الكامل للمقالة كما هو في ويكيبيديا (مع بعض التنظيف الأساسي الذي تقوم به المكتبة).

"""



"""### الطريقة الأولى: ملخص أطول (قد لا يكون كاملاً)"""

import wikipedia

wikipedia.set_lang("ar")

def get_wikipedia_longer_summary(term):
  print(f"جارٍ البحث عن '{term}' في ويكيبيديا...")
  try:
    # إزالة 'sentences' أو وضع رقم كبير جداً للحصول على أطول ملخص ممكن
    # summary = wikipedia.summary(term, sentences=20) # مثال: طلب 20 جملة
    summary = wikipedia.summary(term) # محاولة الحصول على الملخص الافتراضي الأطول

    print("\n--- ملخص أطول من ويكيبيديا ---")
    print(summary)

  except wikipedia.exceptions.PageError:
    print(f"عذراً، لم أتمكن من العثور على صفحة ويكيبيديا لـ '{term}'.")
  except wikipedia.exceptions.DisambiguationError as e:
    print(f"'{term}' قد تشير إلى عدة مواضيع. هل تقصد أحد التالية؟")
    for i, option in enumerate(e.options):
        if i < 10:
            print(f"- {option}")
        else:
            print(f"... وغيرها ({len(e.options) - 10} خيار إضافي)")
            break
  except Exception as e:
    print(f"حدث خطأ غير متوقع: {e}")

if __name__ == "__main__":
  search_term = input("أدخل الكلمة أو الاسم للبحث عن ملخص أطول: ")
  if search_term:
    get_wikipedia_longer_summary(search_term)
  else:
    print("لم تدخل أي مصطلح للبحث.")

"""شرح التعديلات في الطريقة الثانية:
page = wikipedia.page(term, auto_suggest=False): هذه الدالة تحاول العثور على الصفحة المطابقة تماماً للمصطلح وتعيد كائن يمثل تلك الصفحة. auto_suggest=False يمنع المكتبة من محاولة تخمين مصطلح آخر إذا لم تجد تطابقاً دقيقاً، مما قد يكون مفيداً لتجنب نتائج غير متوقعة.
content = page.content: بعد الحصول على كائن الصفحة page، نصل إلى خاصية content التي تحتوي على النص الكامل للمقالة.
page.title: يمكننا أيضاً الوصول لعنوان الصفحة الفعلي الذي وجدته ويكيبيديا باستخدام page.title.
max_chars (اختياري): أضفت معاملاً اختيارياً max_chars للدالة. إذا قمت بتمرير رقم (مثل 2000)، فسيتم طباعة أول 2000 حرف فقط من المحتوى، وهو مفيد إذا كانت المقالات طويلة جداً ولا تريد طباعتها بالكامل في الطرفية. إذا لم تمرر قيمة لـ max_chars أو كانت None، فسيتم طباعة المحتوى كاملاً.
اختر الطريقة التي تناسب احتياجك. إذا كنت تريد فقط ملخصاً أطول قليلاً، جرب الطريقة الأولى. إذا كنت تريد النص الكامل للمقالة، استخدم الطريقة الثانية.

### الطريقة الثانية: المحتوى الكامل للصفحة (الأكثر تفصيلاً)
"""

import wikipedia

wikipedia.set_lang("ar")

def get_wikipedia_full_content(term, max_chars=None):
  """
  تبحث عن مصطلح في ويكيبيديا العربية وتعرض المحتوى الكامل للصفحة.

  Args:
    term (str): الكلمة أو الاسم المراد البحث عنه.
    max_chars (int, optional): الحد الأقصى لعدد الأحرف المراد طباعته
                                من المحتوى الكامل. إذا كانت None، سيتم طباعة كل شيء.
                                Defaults to None.

  Returns:
    None: تطبع المحتوى أو رسالة خطأ.
  """
  print(f"جارٍ البحث عن '{term}' في ويكيبيديا...")
  try:
    # الحصول على كائن الصفحة
    page = wikipedia.page(term, auto_suggest=False) # auto_suggest=False لمنع الاقتراحات التلقائية إذا لم تكن دقيقة

    print(f"\n--- محتوى صفحة '{page.title}' من ويكيبيديا ---")

    # الحصول على المحتوى الكامل
    content = page.content

    # طباعة المحتوى (كاملاً أو جزء منه)
    if max_chars and len(content) > max_chars:
        print(content[:max_chars])
        print(f"\n... (تم عرض أول {max_chars} حرف من المحتوى الكامل)")
    else:
        print(content)

  except wikipedia.exceptions.PageError:
    print(f"عذراً، لم أتمكن من العثور على صفحة ويكيبيديا لـ '{term}'. حاول مصطلحاً آخر.")
  except wikipedia.exceptions.DisambiguationError as e:
    print(f"'{term}' قد تشير إلى عدة مواضيع. هل تقصد أحد التالية؟")
    for i, option in enumerate(e.options):
        if i < 10:
            print(f"- {option}")
        else:
            print(f"... وغيرها ({len(e.options) - 10} خيار إضافي)")
            break
  except Exception as e:
    print(f"حدث خطأ غير متوقع: {e}")

# --- الجزء الرئيسي لتشغيل الكود ---
if __name__ == "__main__":
  search_term = input("أدخل الكلمة أو الاسم للبحث عن محتوى الصفحة الكامل: ")
  if search_term:
    # يمكنك تحديد عدد الأحرف هنا إذا أردت، مثلاً: get_wikipedia_full_content(search_term, max_chars=2000)
    get_wikipedia_full_content(search_term)
  else:
    print("لم تدخل أي مصطلح للبحث.")







import os # لاستخدام وظائف نظام التشغيل مثل التحقق من وجود ملف

def search_in_file(filename, term):
  """
  تبحث عن مصطلح في ملف نصي وتعرض الأسطر التي تحتويه.
  (هذا مثال بسيط جداً)
  """
  print(f"جارٍ البحث عن '{term}' في الملف '{filename}'...")
  try:
    # التأكد من وجود الملف
    if not os.path.exists(filename):
        raise FileNotFoundError(f"الملف '{filename}' غير موجود.")

    found_lines = []
    with open(filename, 'r', encoding='utf-8') as f: # فتح الملف للقراءة مع ترميز UTF-8
      for line_num, line in enumerate(f):
        # بحث بسيط (يمكن تحسينه ليكون غير حساس لحالة الأحرف مثلاً)
        if term in line:
          found_lines.append(f"سطر {line_num + 1}: {line.strip()}") # strip لإزالة المسافات الزائدة

    if found_lines:
      print("\n--- النتائج من الملف ---")
      for line in found_lines:
        print(line)
    else:
      print(f"لم يتم العثور على '{term}' في الملف.")

  except FileNotFoundError as e:
    print(f"خطأ: {e}")
  except Exception as e:
    print(f"حدث خطأ غير متوقع أثناء قراءة الملف: {e}")

# --- الجزء الرئيسي ---
if __name__ == "__main__":
  file_to_search = "my_data.txt" # اسم الملف الذي تريد البحث فيه
  search_term = input(f"أدخل الكلمة للبحث عنها في الملف '{file_to_search}': ")

  # (يفضل إنشاء ملف my_data.txt بنفسك ووضع بعض النصوص فيه للتجربة)

  if search_term:
    search_in_file(file_to_search, search_term)
  else:
    print("لم تدخل أي مصطلح للبحث.")

import os # لاستخدام وظائف نظام التشغيل مثل التحقق من وجود ملف

def search_in_file(filename, term):
  """
  تبحث عن مصطلح في ملف نصي وتعرض الأسطر التي تحتويه.
  (هذا مثال بسيط جداً)
  """
  print(f"جارٍ البحث عن '{term}' في الملف '{filename}'...")
  try:
    # التأكد من وجود الملف
    if not os.path.exists(filename):
        raise FileNotFoundError(f"الملف '{filename}' غير موجود.")

    found_lines = []
    with open(filename, 'r', encoding='utf-8') as f: # فتح الملف للقراءة مع ترميز UTF-8
      for line_num, line in enumerate(f):
        # بحث بسيط (يمكن تحسينه ليكون غير حساس لحالة الأحرف مثلاً)
        if term in line:
          found_lines.append(f"سطر {line_num + 1}: {line.strip()}") # strip لإزالة المسافات الزائدة

    if found_lines:
      print("\n--- النتائج من الملف ---")
      for line in found_lines:
        print(line)
    else:
      print(f"لم يتم العثور على '{term}' في الملف.")

  except FileNotFoundError as e:
    print(f"خطأ: {e}")
  except Exception as e:
    print(f"حدث خطأ غير متوقع أثناء قراءة الملف: {e}")

# --- الجزء الرئيسي ---
if __name__ == "__main__":
  file_to_search = "a.txt" # اسم الملف الذي تريد البحث فيه
  search_term = input(f"أدخل الكلمة للبحث عنها في الملف '{file_to_search}': ")

  # (يفضل إنشاء ملف my_data.txt بنفسك ووضع بعض النصوص فيه للتجربة)

  if search_term:
    search_in_file(file_to_search, search_term)
  else:
    print("لم تدخل أي مصطلح للبحث.")

a.txt

1 to 5 of 5 entries
Filter

name	invention
Thomas Edison	Light Bulb
Alexander Graham Bell	Telephone
Marie Curie	Radioactivity
The Wright Brothers	Airplane
Tim Berners-Lee	World Wide Web
Show
10
 per page



import os # لاستخدام وظائف نظام التشغيل مثل التحقق من وجود ملف

def search_in_file(filename, term):
  """
  تبحث عن مصطلح في ملف نصي وتعرض الأسطر التي تحتويه.
  (هذا مثال بسيط جداً)
  """
  print(f"جارٍ البحث عن '{term}' في الملف '{filename}'...")
  try:
    # التأكد من وجود الملف
    if not os.path.exists(filename):
        raise FileNotFoundError(f"الملف '{filename}' غير موجود.")

    found_lines = []
    with open(filename, 'r', encoding='utf-8') as f: # فتح الملف للقراءة مع ترميز UTF-8
      for line_num, line in enumerate(f):
        # بحث بسيط (يمكن تحسينه ليكون غير حساس لحالة الأحرف مثلاً)
        if term in line:
          found_lines.append(f"سطر {line_num + 1}: {line.strip()}") # strip لإزالة المسافات الزائدة

    if found_lines:
      print("\n--- النتائج من الملف ---")
      for line in found_lines:
        print(line)
    else:
      print(f"لم يتم العثور على '{term}' في الملف.")

  except FileNotFoundError as e:
    print(f"خطأ: {e}")
  except Exception as e:
    print(f"حدث خطأ غير متوقع أثناء قراءة الملف: {e}")

# --- الجزء الرئيسي ---
if __name__ == "__main__":
  file_to_search = "b.txt" # اسم الملف الذي تريد البحث فيه
  search_term = input(f"أدخل الكلمة للبحث عنها في الملف '{file_to_search}': ")

  # (يفضل إنشاء ملف my_data.txt بنفسك ووضع بعض النصوص فيه للتجربة)

  if search_term:
    search_in_file(file_to_search, search_term)
  else:
    print("لم تدخل أي مصطلح للبحث.")

b.txt


Contents
 Title Page
 Books by Rick Riordan
 Copyright
 Dedication
 Introduction
 The Beginning and Stuff
 The Golden Age of Cannibalism
 The Olympians Bash Some Heads
 Zeus
 Hestia Chooses Bachelor Number Zero
 Demeter Turns into Grainzilla
 Persephone Marries Her Stalker
 Hera Gets a Little Cuckoo
 Hades Does Home Improvement
 Poseidon Gets Salty
 Zeus Kills Everyone
 Athena Adopts a Handkerchief
 You Gotta Love Aphrodite
8/999
 Ares, the Manly Man’s Manly Man
 Hephaestus Makes Me a Golden Llama
 (Not Really, but He Totally Should)
 Apollo Sings and Dances and Shoots
 People
 Artemis Unleashes the Death Pig
 Hermes Goes to Juvie
 Dionysus Conquers the World with a
 Refreshing Beverage
 Afterword
 List of Illustrations
 About the Author and Illustrator
To my father, Rick Riordan, Sr., who read
 me my first book of mythology
 —R.R.
 To my heroes of illustration: N. C. Wyeth,
 Maxfield Parrish, Arthur Rackham, and
 Frank Frazetta
 —J.R.
INTRODUCTION
 I HOPEI’M GETTING EXTRA CREDIT FOR THIS.
 A publisher in New York asked me
 to write down what I know about the Greek
 gods, and I was like, “Can we do this an
onymously? Because I don’t need the
 Olympians mad at me again.”
 But if it helps you to know your Greek
 gods, and survive an encounter with them if
 they ever show up in your face, then I guess
 writing all this down will be my good deed
 for the week.